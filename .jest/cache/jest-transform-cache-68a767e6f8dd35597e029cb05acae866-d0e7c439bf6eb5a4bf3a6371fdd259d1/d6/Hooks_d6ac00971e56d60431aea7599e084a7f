61ab7a1b283f498c9106ad91d7ee6f1d
Object.defineProperty(exports, "__esModule", { value: true });exports.useNavigation = useNavigation;exports.useNavigationParam = useNavigationParam;exports.useNavigationState = useNavigationState;exports.useNavigationKey = useNavigationKey;exports.useNavigationEvents = useNavigationEvents;exports.useFocusState = useFocusState;var _slicedToArray2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/slicedToArray"));var _defineProperty2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/defineProperty"));function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {keys.push.apply(keys, Object.getOwnPropertySymbols(object));}if (enumerableOnly) keys = keys.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function useNavigation() {var navigation = (0, require("react").useContext)(require("react-navigation").NavigationContext);if (!navigation) {throw new Error("react-navigation hooks require a navigation context but it couldn't be found. " + "Make sure you didn't forget to create and render the react-navigation app container. " + 'If you need to access an optional navigation object, you can useContext(NavigationContext), which may return');}return navigation;}function useNavigationParam(paramName) {return useNavigation().getParam(paramName);}function useNavigationState() {return useNavigation().state;}function useNavigationKey() {return useNavigation().state.key;}var useGetter = function useGetter(value) {var ref = (0, require("react").useRef)(value);(0, require("react").useLayoutEffect)(function () {ref.current = value;});return (0, require("react").useCallback)(function () {return ref.current;}, [ref]);};function useNavigationEvents(callback) {var navigation = useNavigation();var getLatestCallback = useGetter(callback);(0, require("react").useLayoutEffect)(function () {var subscribedCallback = function subscribedCallback(event) {var latestCallback = getLatestCallback();latestCallback(event);};var subs = [navigation.addListener('action', subscribedCallback), navigation.addListener('willFocus', subscribedCallback), navigation.addListener('didFocus', subscribedCallback), navigation.addListener('willBlur', subscribedCallback), navigation.addListener('didBlur', subscribedCallback)];return function () {subs.forEach(function (sub) {return sub.remove();});};}, [navigation.state.key]);}var emptyFocusState = { isFocused: false, isBlurring: false, isBlurred: false, isFocusing: false };var didFocusState = _objectSpread({}, emptyFocusState, { isFocused: true });var willBlurState = _objectSpread({}, emptyFocusState, { isBlurring: true });var didBlurState = _objectSpread({}, emptyFocusState, { isBlurred: true });var willFocusState = _objectSpread({}, emptyFocusState, { isFocusing: true });function nextFocusState(eventName, currentState) {switch (eventName) {case 'willFocus':return _objectSpread({}, willFocusState, { isFocused: currentState.isFocused });case 'didFocus':return didFocusState;case 'willBlur':return willBlurState;case 'didBlur':return didBlurState;default:return currentState;}}function useFocusState() {var navigation = useNavigation();var _useState = (0, require("react").useState)(function () {return navigation.isFocused() ? didFocusState : didBlurState;}),_useState2 = (0, _slicedToArray2.default)(_useState, 2),focusState = _useState2[0],setFocusState = _useState2[1];useNavigationEvents(function (e) {setFocusState(function (currentFocusState) {return nextFocusState(e.type, currentFocusState);});});return focusState;}