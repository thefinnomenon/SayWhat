d2c121827930f39e24a9169adfc07a5b
"use strict";var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");






var _ReactNativeVersion = require("react-native/Libraries/Core/ReactNativeVersion");var _jsxFileName = "/Users/finn/Dev/Projects/Active/SayWhat/saywhat/node_modules/react-native-screens/src/screens.native.js";function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}

var USE_SCREENS = false;



var getViewManagerConfigCompat = function getViewManagerConfigCompat(name) {return (
    typeof _reactNative.UIManager.getViewManagerConfig !== 'undefined' ?
    _reactNative.UIManager.getViewManagerConfig(name) :
    _reactNative.UIManager[name]);};

function useScreens() {var shouldUseScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  USE_SCREENS = shouldUseScreens;
  if (USE_SCREENS && !getViewManagerConfigCompat('RNSScreen')) {
    console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");


  }
}

function screensEnabled() {
  return USE_SCREENS;
}



var NativeScreenValue;
var NativeScreenContainerValue;
var NativeScreenStack;
var NativeScreenStackHeaderConfig;
var NativeScreenStackHeaderSubview;
var AnimatedNativeScreen;

var ScreensNativeModules = {
  get NativeScreen() {
    NativeScreenValue =
    NativeScreenValue || (0, _reactNative.requireNativeComponent)('RNSScreen', null);
    return NativeScreenValue;
  },

  get NativeScreenContainer() {
    NativeScreenContainerValue =
    NativeScreenContainerValue ||
    (0, _reactNative.requireNativeComponent)('RNSScreenContainer', null);
    return NativeScreenContainerValue;
  },

  get NativeScreenStack() {
    NativeScreenStack =
    NativeScreenStack || (0, _reactNative.requireNativeComponent)('RNSScreenStack', null);
    return NativeScreenStack;
  },

  get NativeScreenStackHeaderConfig() {
    NativeScreenStackHeaderConfig =
    NativeScreenStackHeaderConfig ||
    (0, _reactNative.requireNativeComponent)('RNSScreenStackHeaderConfig', null);
    return NativeScreenStackHeaderConfig;
  },

  get NativeScreenStackHeaderSubview() {
    NativeScreenStackHeaderSubview =
    NativeScreenStackHeaderSubview ||
    (0, _reactNative.requireNativeComponent)('RNSScreenStackHeaderSubview', null);
    return NativeScreenStackHeaderSubview;
  } };var


Screen = function (_React$Component) {_inherits(Screen, _React$Component);function Screen() {var _getPrototypeOf2;var _this;_classCallCheck(this, Screen);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Screen)).call.apply(_getPrototypeOf2, [this].concat(args)));_this.



    setRef = function (ref) {
      _this._ref = ref;
      _this.props.onComponentRef && _this.props.onComponentRef(ref);
    };return _this;}_createClass(Screen, [{ key: "setNativeProps", value: function setNativeProps(props) {this._ref.setNativeProps(props);} }, { key: "render", value: function render()
    {
      if (!USE_SCREENS) {var _this$props =





        this.props,active = _this$props.active,onComponentRef = _this$props.onComponentRef,props = _objectWithoutProperties(_this$props, ["active", "onComponentRef"]);

        return _react.default.createElement(_reactNative.Animated.View, _extends({}, props, { ref: this.setRef, __source: { fileName: _jsxFileName, lineNumber: 94 } }));
      } else {
        AnimatedNativeScreen =
        AnimatedNativeScreen ||
        _reactNative.Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);

        if (_ReactNativeVersion.version.minor >= 57) {
          return _react.default.createElement(AnimatedNativeScreen, _extends({}, this.props, { ref: this.setRef, __source: { fileName: _jsxFileName, lineNumber: 101 } }));
        } else {var _this$props2 =




          this.props,style = _this$props2.style,children = _this$props2.children,rest = _objectWithoutProperties(_this$props2, ["style", "children"]);
          return (
            _react.default.createElement(AnimatedNativeScreen, _extends({},
            rest, {
              ref: this.setRef,
              style: _reactNative.StyleSheet.absoluteFill, __source: { fileName: _jsxFileName, lineNumber: 109 } }),
            _react.default.createElement(_reactNative.Animated.View, { style: style, __source: { fileName: _jsxFileName, lineNumber: 113 } }, children)));


        }
      }
    } }]);return Screen;}(_react.default.Component);var


ScreenContainer = function (_React$Component2) {_inherits(ScreenContainer, _React$Component2);function ScreenContainer() {_classCallCheck(this, ScreenContainer);return _possibleConstructorReturn(this, _getPrototypeOf(ScreenContainer).apply(this, arguments));}_createClass(ScreenContainer, [{ key: "render", value: function render()
    {
      if (!USE_SCREENS) {
        return _react.default.createElement(_reactNative.View, _extends({}, this.props, { __source: { fileName: _jsxFileName, lineNumber: 124 } }));
      } else {
        return _react.default.createElement(ScreensNativeModules.NativeScreenContainer, _extends({}, this.props, { __source: { fileName: _jsxFileName, lineNumber: 126 } }));
      }
    } }]);return ScreenContainer;}(_react.default.Component);


var styles = _reactNative.StyleSheet.create({
  headerSubview: {
    position: 'absolute',
    top: 0,
    right: 0,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center' } });



var ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {return (
    _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({},
    props, {
      type: "right",
      style: styles.headerSubview, __source: { fileName: _jsxFileName, lineNumber: 143 } })));};



var ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {return (
    _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({},
    props, {
      type: "left",
      style: styles.headerSubview, __source: { fileName: _jsxFileName, lineNumber: 151 } })));};



var ScreenStackHeaderTitleView = function ScreenStackHeaderTitleView(props) {return (
    _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({},
    props, {
      type: "title",
      style: styles.headerSubview, __source: { fileName: _jsxFileName, lineNumber: 159 } })));};



var ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {return (
    _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({},
    props, {
      type: "center",
      style: styles.headerSubview, __source: { fileName: _jsxFileName, lineNumber: 167 } })));};



module.exports = {
  ScreenContainer: ScreenContainer,
  Screen: Screen,
  get NativeScreen() {
    return ScreensNativeModules.NativeScreen;
  },

  get NativeScreenContainer() {
    return ScreensNativeModules.NativeScreenContainer;
  },

  get ScreenStack() {
    return ScreensNativeModules.NativeScreenStack;
  },
  get ScreenStackHeaderConfig() {
    return ScreensNativeModules.NativeScreenStackHeaderConfig;
  },
  get ScreenStackHeaderSubview() {
    return ScreensNativeModules.NativeScreenStackHeaderSubview;
  },
  ScreenStackHeaderRightView: ScreenStackHeaderRightView,
  ScreenStackHeaderLeftView: ScreenStackHeaderLeftView,
  ScreenStackHeaderTitleView: ScreenStackHeaderTitleView,
  ScreenStackHeaderCenterView: ScreenStackHeaderCenterView,

  useScreens: useScreens,
  screensEnabled: screensEnabled };