ddb6face1176006d0a8dcc922806d860










'use strict';function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





































var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var OVERRIDE_PROPS = [
'accessibilityLabel',
'accessibilityHint',
'accessibilityIgnoresInvertColors',
'accessibilityRole',
'accessibilityStates',
'accessibilityState',
'accessibilityActions',
'onAccessibilityAction',
'hitSlop',
'nativeID',
'onBlur',
'onFocus',
'onLayout',
'testID'];







































var TouchableWithoutFeedback = require('create-react-class')({
  displayName: 'TouchableWithoutFeedback',
  mixins: [require('./Touchable').Mixin],

  propTypes: {
    accessible: require('prop-types').bool,
    accessibilityLabel: require('prop-types').node,
    accessibilityHint: require('prop-types').string,
    accessibilityIgnoresInvertColors: require('prop-types').bool,
    accessibilityRole: require('prop-types').oneOf(require('../../DeprecatedPropTypes/DeprecatedViewAccessibility').DeprecatedAccessibilityRoles),
    accessibilityStates: require('prop-types').array,
    accessibilityState: require('prop-types').object,
    accessibilityActions: require('prop-types').array,
    onAccessibilityAction: require('prop-types').func,





    onFocus: require('prop-types').func,





    onBlur: require('prop-types').func,



    disabled: require('prop-types').bool,




    onPress: require('prop-types').func,




    onPressIn: require('prop-types').func,



    onPressOut: require('prop-types').func,





    onLayout: require('prop-types').func,



    touchSoundDisabled: require('prop-types').bool,

    onLongPress: require('prop-types').func,

    nativeID: require('prop-types').string,
    testID: require('prop-types').string,




    delayPressIn: require('prop-types').number,



    delayPressOut: require('prop-types').number,



    delayLongPress: require('prop-types').number,







    pressRetentionOffset: require('../../DeprecatedPropTypes/DeprecatedEdgeInsetsPropType'),








    hitSlop: require('../../DeprecatedPropTypes/DeprecatedEdgeInsetsPropType') },


  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    require('./ensurePositiveDelayProps')(this.props);
  },

  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
    require('./ensurePositiveDelayProps')(nextProps);
  },





  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {

    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ?
    0 :
    this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut || 0;
  },

  render: function render() {


    var child = require('react').Children.only(this.props.children);
    var children = child.props.children;
    if (require('./Touchable').TOUCH_TARGET_DEBUG && child.type === require('../View/View')) {
      children = require('react').Children.toArray(children);
      children.push(
      require('./Touchable').renderDebugView({ color: 'red', hitSlop: this.props.hitSlop }));

    }

    var overrides = {};
    for (var _iterator = OVERRIDE_PROPS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {var _ref;if (_isArray) {if (_i >= _iterator.length) break;_ref = _iterator[_i++];} else {_i = _iterator.next();if (_i.done) break;_ref = _i.value;}var _prop = _ref;
      if (this.props[_prop] !== undefined) {
        overrides[_prop] = this.props[_prop];
      }
    }

    return require('react').cloneElement(child, _objectSpread({},
    overrides, {
      accessible: this.props.accessible !== false,
      focusable:
      this.props.focusable !== false && this.props.onPress !== undefined,
      onClick: this.touchableHandlePress,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.
      touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate,
      children: children }));

  } });


module.exports = TouchableWithoutFeedback;