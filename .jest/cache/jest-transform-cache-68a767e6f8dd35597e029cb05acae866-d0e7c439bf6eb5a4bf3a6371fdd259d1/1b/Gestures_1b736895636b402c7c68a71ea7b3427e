69f2b1726d938eda0be4cb5ca6437edf
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.RotationGestureHandler = exports.PinchGestureHandler = exports.PanGestureHandler = exports.LongPressGestureHandler = exports.ForceTouchGestureHandler = exports.FlingGestureHandler = exports.TapGestureHandler = void 0;var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));

var _createHandler = _interopRequireDefault(require("./createHandler"));
var _GestureHandlerPropTypes = _interopRequireDefault(require("./GestureHandlerPropTypes"));
var _PlatformConstants = _interopRequireDefault(require("./PlatformConstants"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var TapGestureHandler = (0, _createHandler.default)(
'TapGestureHandler', _objectSpread({},

_GestureHandlerPropTypes.default, {
  maxDurationMs: _propTypes.default.number,
  maxDelayMs: _propTypes.default.number,
  numberOfTaps: _propTypes.default.number,
  maxDeltaX: _propTypes.default.number,
  maxDeltaY: _propTypes.default.number,
  maxDist: _propTypes.default.number,
  minPointers: _propTypes.default.number }),

{});exports.TapGestureHandler = TapGestureHandler;


var FlingGestureHandler = (0, _createHandler.default)(
'FlingGestureHandler', _objectSpread({},

_GestureHandlerPropTypes.default, {
  numberOfPointers: _propTypes.default.number,
  direction: _propTypes.default.number }),

{});exports.FlingGestureHandler = FlingGestureHandler;var


ForceTouchFallback = function (_React$Component) {_inherits(ForceTouchFallback, _React$Component);function ForceTouchFallback() {_classCallCheck(this, ForceTouchFallback);return _possibleConstructorReturn(this, _getPrototypeOf(ForceTouchFallback).apply(this, arguments));}_createClass(ForceTouchFallback, [{ key: "componentDidMount", value: function componentDidMount()
    {
      console.warn(
      'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase');

    } }, { key: "render", value: function render()
    {
      return this.props.children;
    } }]);return ForceTouchFallback;}(_react.default.Component);


var ForceTouchGestureHandler =
_PlatformConstants.default && _PlatformConstants.default.forceTouchAvailable ?
(0, _createHandler.default)(
'ForceTouchGestureHandler', _objectSpread({},

_GestureHandlerPropTypes.default, {
  minForce: _propTypes.default.number,
  maxForce: _propTypes.default.number,
  feedbackOnActivation: _propTypes.default.bool }),

{}) :

ForceTouchFallback;exports.ForceTouchGestureHandler = ForceTouchGestureHandler;

ForceTouchGestureHandler.forceTouchAvailable =
_PlatformConstants.default && _PlatformConstants.default.forceTouchAvailable || false;

var LongPressGestureHandler = (0, _createHandler.default)(
'LongPressGestureHandler', _objectSpread({},

_GestureHandlerPropTypes.default, {
  minDurationMs: _propTypes.default.number,
  maxDist: _propTypes.default.number }),

{});exports.LongPressGestureHandler = LongPressGestureHandler;


function validatePanGestureHandlerProps(props) {
  if (props.minDeltaX && props.activeOffsetX) {
    throw new Error("It's not supported use minDeltaX with activeOffsetXStart or activeOffsetXEnd");


  }
  if (props.maxDeltaX && props.failOffsetX) {
    throw new Error("It's not supported use minDeltaX with activeOffsetXStart or activeOffsetXEnd");


  }
  if (props.minDeltaY && props.activeOffsetY) {
    throw new Error("It's not supported use minDeltaX with activeOffsetYStart or activeOffsetYEnd");


  }
  if (props.maxDeltaY && props.failOffsetY) {
    throw new Error("It's not supported use minDeltaX with activeOffsetYStart or activeOffsetYEnd");


  }
  if (
  Array.isArray(props.activeOffsetX) && (
  props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0))
  {
    throw new Error("First element of activeOffsetX should be negative, a the second one should be positive");


  }

  if (
  Array.isArray(props.activeOffsetY) && (
  props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0))
  {
    throw new Error("First element of activeOffsetY should be negative, a the second one should be positive");


  }

  if (
  Array.isArray(props.failOffsetX) && (
  props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0))
  {
    throw new Error("First element of failOffsetX should be negative, a the second one should be positive");


  }

  if (
  Array.isArray(props.failOffsetY) && (
  props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0))
  {
    throw new Error("First element of failOffsetY should be negative, a the second one should be positive");


  }
}

function transformPanGestureHandlerProps(props) {
  var res = _objectSpread({}, props);
  if (props.minDeltaX !== undefined) {
    delete res['minDeltaX'];
    res.activeOffsetXStart = -props.minDeltaX;
    res.activeOffsetXEnd = props.minDeltaX;
  }
  if (props.maxDeltaX !== undefined) {
    delete res['maxDeltaX'];
    res.failOffsetXStart = -props.maxDeltaX;
    res.failOffsetXEnd = props.maxDeltaX;
  }
  if (props.minOffsetX !== undefined) {
    delete res['minOffsetX'];
    if (props.minOffsetX < 0) {
      res.activeOffsetXStart = props.minOffsetX;
    } else {
      res.activeOffsetXEnd = props.minOffsetX;
    }
  }

  if (props.minDeltaY !== undefined) {
    delete res['minDeltaY'];
    res.activeOffsetYStart = -props.minDeltaY;
    res.activeOffsetYEnd = props.minDeltaY;
  }
  if (props.maxDeltaY !== undefined) {
    delete res['maxDeltaY'];
    res.failOffsetYStart = -props.maxDeltaY;
    res.failOffsetYEnd = props.maxDeltaY;
  }

  if (props.minOffsetY !== undefined) {
    delete res['minOffsetY'];
    if (props.minOffsetY < 0) {
      res.activeOffsetYStart = props.minOffsetY;
    } else {
      res.activeOffsetYEnd = props.minOffsetY;
    }
  }

  if (props.activeOffsetX !== undefined) {
    delete res['activeOffsetX'];
    if (Array.isArray(props.activeOffsetX)) {
      res.activeOffsetXStart = props.activeOffsetX[0];
      res.activeOffsetXEnd = props.activeOffsetX[1];
    } else if (props.activeOffsetX < 0) {
      res.activeOffsetXStart = props.activeOffsetX;
    } else {
      res.activeOffsetXEnd = props.activeOffsetX;
    }
  }

  if (props.activeOffsetY !== undefined) {
    delete res['activeOffsetY'];
    if (Array.isArray(props.activeOffsetY)) {
      res.activeOffsetYStart = props.activeOffsetY[0];
      res.activeOffsetYEnd = props.activeOffsetY[1];
    } else if (props.activeOffsetY < 0) {
      res.activeOffsetYStart = props.activeOffsetY;
    } else {
      res.activeOffsetYEnd = props.activeOffsetY;
    }
  }

  if (props.failOffsetX !== undefined) {
    delete res['failOffsetX'];
    if (Array.isArray(props.failOffsetX)) {
      res.failOffsetXStart = props.failOffsetX[0];
      res.failOffsetXEnd = props.failOffsetX[1];
    } else if (props.failOffsetX < 0) {
      res.failOffsetXStart = props.failOffsetX;
    } else {
      res.failOffsetXEnd = props.failOffsetX;
    }
  }

  if (props.failOffsetY !== undefined) {
    delete res['failOffsetY'];
    if (Array.isArray(props.failOffsetY)) {
      res.failOffsetYStart = props.failOffsetY[0];
      res.failOffsetYEnd = props.failOffsetY[1];
    } else if (props.failOffsetY < 0) {
      res.failOffsetYStart = props.failOffsetY;
    } else {
      res.failOffsetYEnd = props.failOffsetY;
    }
  }

  return res;
}

function managePanProps(props) {
  if (__DEV__) {
    validatePanGestureHandlerProps(props);
  }
  return transformPanGestureHandlerProps(props);
}

var PanGestureHandler = (0, _createHandler.default)(
'PanGestureHandler', _objectSpread({},

_GestureHandlerPropTypes.default, {
  activeOffsetY: _propTypes.default.oneOfType([
  _propTypes.default.number,
  _propTypes.default.arrayOf(_propTypes.default.number)]),

  activeOffsetX: _propTypes.default.oneOfType([
  _propTypes.default.number,
  _propTypes.default.arrayOf(_propTypes.default.number)]),

  failOffsetY: _propTypes.default.oneOfType([
  _propTypes.default.number,
  _propTypes.default.arrayOf(_propTypes.default.number)]),

  failOffsetX: _propTypes.default.oneOfType([
  _propTypes.default.number,
  _propTypes.default.arrayOf(_propTypes.default.number)]),

  minDist: _propTypes.default.number,
  minVelocity: _propTypes.default.number,
  minVelocityX: _propTypes.default.number,
  minVelocityY: _propTypes.default.number,
  minPointers: _propTypes.default.number,
  maxPointers: _propTypes.default.number,
  avgTouches: _propTypes.default.bool }),

{},
managePanProps,
{
  activeOffsetYStart: true,
  activeOffsetYEnd: true,
  activeOffsetXStart: true,
  activeOffsetXEnd: true,
  failOffsetYStart: true,
  failOffsetYEnd: true,
  failOffsetXStart: true,
  failOffsetXEnd: true });exports.PanGestureHandler = PanGestureHandler;


var PinchGestureHandler = (0, _createHandler.default)(
'PinchGestureHandler',
_GestureHandlerPropTypes.default,
{});exports.PinchGestureHandler = PinchGestureHandler;

var RotationGestureHandler = (0, _createHandler.default)(
'RotationGestureHandler',
_GestureHandlerPropTypes.default,
{});exports.RotationGestureHandler = RotationGestureHandler;